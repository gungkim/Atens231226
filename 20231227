{
    public enum Grade
    {
        A,
        B,
        C,
        D,
        F
    }

    public enum DayofWeek
    {
        Monday,
        Tuesday,
        Wednesday,
        Friday,
        Saturday,
        Sunday
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            Random r = new Random();
            int dice= r.Next(5) + 1;    //dice에는 1~6이 들어간다.

            // 실습
            // 주사위 게임 만들기
            // 1. High/Low 만들기
            //      1.1. 시작하면 High와 Low중 하나를 입력받음
            //      1.2. 주사위를 굴려 1~3이면 Low, 4~6이면 High를 출력한다.
            //      1.3. 플레이어의 선택이 맞으면 성공으로 한 후 다시 시작한다.
            //      1.4. 플레이어의 선택이 틀리면 이때까지 몇번 성공했는지 출력하고 종료한다.

            // 2. 홀짝게임 만들기
            //      2.1. 시작하면 홀짝중 하나를 입력받음
            //      2.2. 주사위를 굴려 홀이면 홀, 짝이면 짝을 출력한다.
            //      2.3. 플레이어의 선택이 맞으면 성공으로 한 후 다시 시작한다.
            //      2.4. 플레이어의 선택이 틀리면 이때까지 몇번 성공했는지 출력하고 종료한다.
        }

        private static void Day_231227()
        {
            /// 함수(function)
            /// 특정 기능을 수행하는 코드 뭉치
            /// 구성요소 : 리턴타입, 이름, 파라메터(매개변수), 함수바디(코드)
            /// 

            // InputName();    // 이름을 입력받고 출력하는 함수

            // 실습
            // 함수만들기
            // 7~43번 라인까지를 수행하는 함수 만들기
            // 함수 이름은 Day_231226

            int i;      // 인티저 타입의 변수 i를 선언(선언을 하게 되면 초기화를 하여 기초에는 0의 상태로 전환됨)
            i = 10;     // i에 10을 대입한다. (=은 대입 연산자)
            bool b = (i == 10);    // i와 10을 비교한 후 같으면 b에 true를 대입하고, 다르면 false를 대입한다. (==는 비교 연산자)
            int j;
            j = i + 10; // +-*/는 산술 연산자

            //i > j;        // Ctrl+K+C : 드래그한 부분 주석처리/ Ctrl+K+U : 드래그한 부분 주석처리 해제
            //i >= j;
            //i < j;
            //i <= j;

            float f;
            f = j + 10;     // int 데이터를 float에 넣는 것은 가능
            //i = f;        // float 데이터를 int에 넣는 것은 불가능

            string str1 = "Hello ";
            string str2 = "World";
            string str3 = str1 + str2;  // str3 = "Hello World"

            string.Format("{0} {1}", str1, str2);
            string str4 = $"{str1} {str2}";

            string str5 = str1 + str2 + str1 + str2;    // 최악의 경우. 쓸대 없는 임시공간이 2개 더 발생

            bool b2 = (str1 == "Hello ");   // true
            bool b3 = (str1 == "HellO ");   // false

            // 문자열간의 비교는 피할 수 있으면 무조건 피하는 것이 이득이다.

            Console.WriteLine($"str5 = {str5}");
            Console.WriteLine($"{str1}{str2}");

            // 제어문(코드의 흐름을 제어하는 코드)

            // 20살 미만이면 미성년자입니다.
            // 20살 이상이면 성인입니다.

            int age = 10;

            // 조건문(제어문 중의 하나로 특정 조건에 따라 다른 코드를 실행하는 코드)
            //if ( age < 20 )     // age가 20보다 작으면
            //{
            //    Console.WriteLine($"{age}살은 미성년자입니다."); // 이 줄을 실행
            //}

            //if( age >= 20 )     // age가 20 이상이면
            //{
            //    Console.WriteLine($"{age}살은 성인입니다."); // 이 줄을 실행
            //}

            //if (age < 20)       // age가 20 미만인가?
            //{
            //    // age가 20 미만이면 이쪽 코드 실행
            //    Console.WriteLine($"{age}살은 미성년자입니다.");
            //}
            //else
            //{
            //    // age가 20 이상이면 이쪽 코드 실행
            //    Console.WriteLine($"{age}살은 성인입니다."); 
            //}

            Console.Write("몇살인가요? : ");
            string inputAge = Console.ReadLine();
            //age = int.Parse( inputAge );        // inputAge에 들어있는 글자를 int타입으로 변경하는 코드
            int.TryParse(inputAge, out age);        // inputAge에 있는 출력값을 out age에 들어간다
            AgeCheck(age);
            //점수 입력 받기
            Console.Write("몇점인가요? : ");
            string inputScore = Console.ReadLine();
            float score;
            float.TryParse(inputScore, out score);
            Grade grade = GradeCheck(score);      // GradeCheck 함수의 결과를 grade에 대입

            switch (grade)      // if else보다 switch를 사용하는 편이 더 빠르다
            {
                case Grade.A:
                    Console.WriteLine("A등급은 ~한 혜택이 있습니다.");
                    break;
                case Grade.B:
                    Console.WriteLine("B등급은 ~한 혜택이 있습니다.");
                    break;
                case Grade.C:
                    Console.WriteLine("C등급은 ~한 혜택이 있습니다.");
                    break;
                case Grade.D:
                    Console.WriteLine("D등급은 ~한 혜택이 있습니다.");
                    break;
                case Grade.F:
                    Console.WriteLine("F등급은 혜택이 없습니다.");
                    break;
                default:
                    Console.WriteLine("아무 등급도 아닙니다");
                    break;
            }


            /// 반복문(코드를 반복하는 코드)

            //int temp2 = 0;
            //temp2 = temp2 + 1; temp2++;       // 둘다 같은 코드

            //for (int temp = 0; temp < 10; temp++) ;     // (초기화, 종료조건, 증가량)
            //{
            //}

            Console.Write("구구단 몇 단을 출력합니까? : ");
            int.TryParse(Console.ReadLine(), out int dan);
            GuGuDan(dan);

            //while문. () 사이의 조건이 참이면 반복하는 코드            
            //while()
            //{

            //}

            int count = 0;
            while (count < 10)
            {
                count++;
            }

            // do-while문. 일단 한번 실행하고 () 사이의 조건이 참이면 반복하는 코드
            count = 0;
            do
            {
                count++;
            } while (count < 10);


            // 대입 연산자
            // = : 왼쪽에 있는 변수에, = 오른쪽에 있는 값을 대입한다.

            // 산술 연산자
            // +
            // -
            // *
            // /
            // ++
            // --
            // += : 왼쪽에 있는 변수에 오른쪽에 있는 값을 더해서 왼쪽에 있는 변수를 대입한다.(i += 10, i에 10을 더한 후 i에 대입)
            // -=
            // *=
            // /=
            // % : 나머지 연산 (i = 10 % 3, i에는 1이 들어간다)

            // 비교 연산자
            // == : 양쪽이 같으면 true
            // |= : 양쪽이 다르면 true, 양쪽이 같으면 false
            // >
            // <
            // >=
            // <=

            // 논리연산자, 결과는 모드 bool
            // && : 앤드(and),양쪽이 모두 true일때만 true (bool result = false && false; )
            // || : 오어(or),양쪽 중 하나라도 true이면 true (bool result = true || true; )
        }


        /// <summary>
        /// 구구단을 출력하는 함수
        /// </summary>
        /// <param name="dan">출력할 단수</param> 
        static void GuGuDan(int dan)
        {
            Console.WriteLine($"구구단 {dan}단 출력하기");
            for (int i=1;i<10;i++)
            {
                Console.WriteLine($"{dan}*{i}={dan*i}");        // 수식 자체로 넣어도 되기는 함.
            }
        }

        /// <summary>
        /// 점수를 받아서 A~F까지 성적을 출력하는 함수
        /// </summary>
        /// <param name="score">점수</param>
        static Grade GradeCheck(float score)
        {
            Grade grade = Grade.F;
            if (score >89)
            {
                Console.WriteLine($"{score}점은 A입니다.");      // 90점 이상 => A
                grade = Grade.A;

                // return Grade A;  //  이렇게 넣는 것은 취향차이
            }
            else if (score > 79)
            {
                Console.WriteLine($"{score}점은 B입니다.");      // 80점 이상 => B
                grade = Grade.B;
            }
            else if (score > 69)
            {
                Console.WriteLine($"{score}점은 C입니다.");      // 70점 이상 => C
                grade = Grade.C;
            }
            else if (score > 59)
            {
                Console.WriteLine($"{score}점은 D입니다.");      // 60점 이상 => D'
                grade = Grade.D;
            }
            else
            {
                Console.WriteLine($"{score}점은 F입니다.");      // 60점 미만 => F
            }

            return grade;
        }

        /// <summary>
        /// 나이를 확인해서 어떤 학교에 다니는지 출력하는 함수
        /// </summary>
        /// <param name="age">입력받은 나이</param>       // 함수 바로위에서 ///  -> 함수에 대한 양식
        static void AgeCheck(int age)       //void : 아무것도 안돌려주는 리턴타입
        {
            if (age < 8)
            {
                Console.WriteLine($"{age}살은 미취학아동입니다.");
            }
            else if (age < 14)
            {
                Console.WriteLine($"{age}살은 초등학생입니다.");
            }
            else if (age < 17)
            {
                Console.WriteLine($"{age}살은 중학생입니다.");
            }
            else if (age < 20)
            {
                Console.WriteLine($"{age}살은 고등학생입니다.");
            }
        }

        private static void Day_231226()
        {
            Console.WriteLine("Hello, World!");     // 한줄을 출력하는 코드
            Console.WriteLine("김경백입니다.");


            /// int : 인티저. 정수형. 소수점 없는 숫자를 저장하기 위한 데이터 타입(32bit), +-21억까지는 안전.
            /// float : 플로트. 실수형. 소수점 있는 숫자를 저장하기 위한 데이터 타입(32bit), 태생적으로 오차가 있다.
            /// bool : 불. true 아니면 false만 저장하는 데이터 타입.

            /// 함수(function)
            /// 특정 기능을 수행하는 코드 뭉치
            /// 구성요소 : 리턴타입, 이름, 파라메터(매개변수), 함수바디(코드)
            /// 

            InputName();    // 이름을 입력받고 출력하는 함수

        }

        /// <summary>
        /// 리턴 타입 : void
        /// 이름 : InputName
        /// 파라메터 : 생략되었음, () 안에 있는 변수
        /// 함수바디 : {} 사이에 있는 코드
        /// </summary>
        static void InputName()
        {
            Console.Write("당신의 이름은 무엇입니까? : ");
            string input = Console.ReadLine();

            Console.WriteLine(input);
        }
    }
}

// 주석 코드에 포함되지 않는다.

/*
  여러줄을 주석으로 처리하는 방법
 */

/// 여러줄을 주석으로 처리하는 방법
/// ㅣㅏㅓㅣㄴ아ㅓㄹ
/// ㅣㄱ자ㅓ
/// 
